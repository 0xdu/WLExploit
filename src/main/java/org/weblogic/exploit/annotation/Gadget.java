package org.weblogic.exploit.annotation;

import org.weblogic.exploit.Exploit;
import org.weblogic.exploit.util.Strings;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.reflect.AnnotatedElement;
import java.util.Arrays;

@Retention(RetentionPolicy.RUNTIME)
public @interface Gadget {
    String cve() default "";

    String command() default "nslookup sub.dnslog.cn";

    String protocol() default "T3";

    String description() default "";

    String[] dependencies() default {};

    boolean osCommand() default true;

    public static class Utils {
        public static String getCVE(Class<? extends Exploit> clazz) {
            Gadget gadget = clazz.getDeclaredAnnotation(Gadget.class);
            if (gadget != null) {
                return gadget.cve();
            } else {
                return "";
            }
        }

        public static String getProtocol(Class<? extends Exploit> clazz) {
            Gadget gadget = clazz.getDeclaredAnnotation(Gadget.class);
            if (gadget != null) {
                return gadget.protocol();
            } else {
                return "";
            }
        }

        public static String getCommand(Class<? extends Exploit> clazz) {
            Gadget gadget = clazz.getDeclaredAnnotation(Gadget.class);
            if (gadget != null) {
                return gadget.command();
            } else {
                return "";
            }
        }

        public static String getDescription(Class<? extends Exploit> clazz) {
            Gadget gadget = clazz.getAnnotation(Gadget.class);
            if (gadget != null) {
                return gadget.description();
            } else {
                return "";
            }
        }

        public static String[] getDependencies(AnnotatedElement annotated) {
            Gadget deps = annotated.getAnnotation(Gadget.class);
            if (deps != null && deps.dependencies() != null) {
                return deps.dependencies();
            } else {
                return new String[0];
            }
        }

        public static String getDependenciesString(AnnotatedElement annotated) {
            String[] deps = getDependencies(annotated);
            return Strings.join(Arrays.asList(deps), ",", "", "");
        }
    }
}
